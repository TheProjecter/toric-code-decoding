#include "operator.h"						#include "operator.h"
#include "constants.h"						#include "constants.h"


// Defines products of elementary Pauli operators.		// Defines products of elementary Pauli operators.
pauli operator*(pauli p, pauli q)				pauli operator*(pauli p, pauli q)
{								{

    pauli res = I;						    pauli res = I;

    if (p == I)							    if (p == I)
        res = q;						        res = q;
    else if (q == I)						    else if (q == I)
        res = p;						        res = p;
    else if ((p == Y && q == Z) || ((p == Z && q == Y)))	    else if ((p == Y && q == Z) || ((p == Z && q == Y)))
        res = X;						        res = X;
    else if ((p == X && q == Z) || ((p == Z && q == X)))	    else if ((p == X && q == Z) || ((p == Z && q == X)))
        res = Y;						        res = Y;
    else if ((p == X && q == Y) || ((p == Y && q == X)))	    else if ((p == X && q == Y) || ((p == Y && q == X)))
        res = Z;						        res = Z;

    return res;							    return res;
}								}


// Constructor generates identity operator of size newSize.	// Constructor generates identity operator of size newSize.
Operator::Operator(int newSize)					Operator::Operator(int newSize)
{								{

    size = newSize;						    size = newSize;

    for (int i = 0; i < size; i ++)				    for (int i = 0; i < size; i ++)
    {								    {
        ops.push_back (I);					        ops.push_back (I);
    }								    }
}								}


// Copy constructor. Constructs a new operator that is an exa	// Copy constructor. Constructs a new operator that is an exa
Operator::Operator (const Operator & p)				Operator::Operator (const Operator & p)
{								{

    size = p.size;						    size = p.size;

    for (int i = 0; i < size; i++)				    for (int i = 0; i < size; i++)
    {								    {
        ops.push_back (p.ops[i]);				        ops.push_back (p.ops[i]);
    }								    }
}								}


// Push back a Pauli operator to ops.				// Push back a Pauli operator to ops.
void Operator::pushBack (pauli & op)				void Operator::pushBack (pauli & op)
{								{

    ops.push_back (op);						    ops.push_back (op);
    size++;							    size++;
}								}


// Retunrs true if two operators commute. Otherwise false.	// Retunrs true if two operators commute. Otherwise false.
bool Operator::commute (Operator & op)				bool Operator::commute (Operator & op)
{								{

    assert (size == op.size);					    assert (size == op.size);
    int result = 1;						    int result = 1;

    for (int i = 0; i < size; i++)				    for (int i = 0; i < size; i++)
    {								    {
        pauli p1 = ops[i];					        pauli p1 = ops[i];
        pauli p2 = op.ops[i];					        pauli p2 = op.ops[i];

        if (p1 != I && p2 != I && (p1 != p2))			        if (p1 != I && p2 != I && (p1 != p2))
            result *= -1;					            result *= -1;
    }								    }

    if (result == 1)						    if (result == 1)
        return true;						        return true;
    else							    else
        return false;						        return false;
}								}


							      |	// Randomize this operator. With probability p, each operatio
// Randomize this operator. With probability p, each operatio <
void Operator::generateRandom (double & p)			void Operator::generateRandom (double & p)
{								{

    assert (p < 1.000001);					    assert (p < 1.000001);

//gives always the same number with srand()		      <
//srand(time(0));					      <
							      <
    for (int i = 0; i < size; i++)				    for (int i = 0; i < size; i++)
    {								    {
							      >	        double r = (double)rand() / ((double)RAND_MAX + 1);

        double randomnumber = (double) rand();		      <
        double r = randomnumber / ((double)RAND_MAX + 1);     <
        if(debug5)					      <
        {						      <
            cout<<" r: "<<r<<" p: "<<p;			      <
        }						      <
        if (r < p)						        if (r < p)
        {						      <
            ops[i] = X;						            ops[i] = X;
        }						      <
        else							        else
        {						      <
            ops[i] = I;						            ops[i] = I;
        }						      <
							      <
        if(debug5)					      <
        {						      <
            cout<<" Err: "<<ops[0]<<endl;		      <
        }						      <
    }								    }
}								}

void Operator::generate_random_evolution(double & p)		void Operator::generate_random_evolution(double & p)
{								{
    assert (p < 1.000001);					    assert (p < 1.000001);

    for (int i = 0; i < size; i++)				    for (int i = 0; i < size; i++)
    {								    {
							      <
        double r = (double)rand() / ((double)RAND_MAX + 1);	        double r = (double)rand() / ((double)RAND_MAX + 1);
							      >
        if (r < p)						        if (r < p)
        {							        {
            ops[i] = ops[i]*X;				      |	            ops[i] = ops[i] * X;
        }/*else						      |	        } /*else {
	//stupid to really multiply it...				//stupid to really multiply it...
	//ops[i] = ops[i]*I;						//ops[i] = ops[i]*I;
	continue;							continue;
	*/						      |		}*/
    }//end of for					      |	    }
							      >
							      >
							      >	}
							      >


							      >
							      >	// With probability p, an operator X is given back, with (1-p
							      >	pauli Operator::generateRandomPauli (double & p)
							      >	{
							      >
							      >	    assert (p < 1.000001);
							      >
							      >	    pauli paulioperator = I;
							      >
							      >	    for (int i = 0; i < size; i++)
							      >	    {
							      >	        double r = (double)rand() / ((double)RAND_MAX + 1);
							      >
							      >	        if (r < p)
							      >	            paulioperator = X;
							      >	        else
							      >	            paulioperator = I;
							      >	    }
							      >
							      >	    return paulioperator;
}								}
							      >






// Operator * overloaded.					// Operator * overloaded.
Operator operator*(const Operator & p, const Operator & q)	Operator operator*(const Operator & p, const Operator & q)
{								{

    assert (p.size == q.size);					    assert (p.size == q.size);
    Operator res (p.size);					    Operator res (p.size);

    for (int i = 0; i < p.size; i++)				    for (int i = 0; i < p.size; i++)
    {								    {
        res.ops[i] = p.ops[i] * q.ops[i];			        res.ops[i] = p.ops[i] * q.ops[i];
    }								    }

    return res;							    return res;
}								}


// Operator == overloaded.					// Operator == overloaded.
bool operator==(const Operator & p, const Operator & q)		bool operator==(const Operator & p, const Operator & q)
{								{

    if (p.size != q.size)					    if (p.size != q.size)
        return false;						        return false;

    bool res = true;						    bool res = true;

    for (int i = 0; i < p.size; i++)				    for (int i = 0; i < p.size; i++)
    {								    {
        if (p.ops[i] != q.ops[i])				        if (p.ops[i] != q.ops[i])
            res = false;					            res = false;
    }								    }

    return res;							    return res;
}								}


// Operator < overloaded. Needed so that operators can be ins	// Operator < overloaded. Needed so that operators can be ins
bool operator<(const Operator & p, const Operator & q)		bool operator<(const Operator & p, const Operator & q)
{								{

    if (p.size < q.size)					    if (p.size < q.size)
        return true;						        return true;

    if (p.size > q.size)					    if (p.size > q.size)
        return false;						        return false;

    for (int i = 0; i < p.size; i++)				    for (int i = 0; i < p.size; i++)
    {								    {
        if (p.ops[i] < q.ops[i])				        if (p.ops[i] < q.ops[i])
            return true;					            return true;
        if (p.ops[i] > q.ops[i])				        if (p.ops[i] > q.ops[i])
            return false;					            return false;
    }								    }

    return false;						    return false;
}								}


// Is this operator the identity?				// Is this operator the identity?
bool Operator::identity (void)					bool Operator::identity (void)
{								{

    bool res = true;						    bool res = true;

    for (int i = 0; i < size; i++)				    for (int i = 0; i < size; i++)
    {								    {
        if (ops[i] != I)					        if (ops[i] != I)
            res = false;					            res = false;
    }								    }

    return res;							    return res;
}								}


// Print this operator on screen.				// Print this operator on screen.
void Operator::printState (void)				void Operator::printState (void)
{								{

    for (int i = 0; i < size; i++)				    for (int i = 0; i < size; i++)
    {								    {
        if (i != 0)						        if (i != 0)
            cout << " ";					            cout << " ";
        switch(ops[i])						        switch(ops[i])
        {							        {
        case I:							        case I:
            cout << "I";					            cout << "I";
            break;						            break;
        case X:							        case X:
            cout << "X";					            cout << "X";
            break;						            break;
        case Y:							        case Y:
            cout << "Y";					            cout << "Y";
            break;						            break;
        case Z:							        case Z:
            cout << "Z";					            cout << "Z";
            break;						            break;
        default:						        default:
            assert (0);						            assert (0);
        }							        }
    }								    }


}								}


//end of file operator.cc					//end of file operator.cc
