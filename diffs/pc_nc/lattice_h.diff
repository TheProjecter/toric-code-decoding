#ifndef LATTICE_H						#ifndef LATTICE_H
#define LATTICE_H						#define LATTICE_H

#define MAX_NEWRAND 65535					#define MAX_NEWRAND 65535

#include <stdlib.h>						#include <stdlib.h>
#include <string>						#include <string>
#include <stdio.h>						#include <stdio.h>
#include <iostream>						#include <iostream>
#include <sstream>						#include <sstream>
#include <assert.h>						#include <assert.h>
#include <vector>						#include <vector>
#include <algorithm>						#include <algorithm>
#include <inttypes.h>						#include <inttypes.h>
#include "operator.h"						#include "operator.h"
#include "blossom5-v2.02.src/PerfectMatching.h"			#include "blossom5-v2.02.src/PerfectMatching.h"
#include "blossom5-v2.02.src/GEOM/GeomPerfectMatching.h"	#include "blossom5-v2.02.src/GEOM/GeomPerfectMatching.h"
							      >	#include "dijkstra.h"


using namespace std;						using namespace std;

// which way to go for the correction line			// which way to go for the correction line
//typedef enabled by default, not to yield compiler warnings	//typedef enabled by default, not to yield compiler warnings
//typedef enum vertical_direction {up, down, neither, wrong_d	//typedef enum vertical_direction {up, down, neither, wrong_d
enum vertical_direction {up, down, neither, wrong_direction};	enum vertical_direction {up, down, neither, wrong_direction};
// is my cell a square or an octagon?				// is my cell a square or an octagon?
//typedef enabled by default					//typedef enabled by default
//typedef enum celltype {sqr, octo, wrong_type};		//typedef enum celltype {sqr, octo, wrong_type};
enum celltype {sqr, octo, wrong_type};				enum celltype {sqr, octo, wrong_type};
//typedef enabled by default					//typedef enabled by default
//what kind of correction shape is it?				//what kind of correction shape is it?
//typedef enum correctiontype {four, before, next};		//typedef enum correctiontype {four, before, next};
enum correctiontype {four, before, next,wrong_correctiontype}	enum correctiontype {four, before, next,wrong_correctiontype}
//what kind of correction Qubit is it?				//what kind of correction Qubit is it?
//typedef enum correctiontype {four, before, next};		//typedef enum correctiontype {four, before, next};
enum correctiontypeQB {four_up, four_down, before_up,before_d	enum correctiontypeQB {four_up, four_down, before_up,before_d





class Cell							class Cell
{								{
public:								public:
    Operator *ErrInit;						    Operator *ErrInit;
    Operator *ErrCurrent;					    Operator *ErrCurrent;
    Operator *ErrGuess;						    Operator *ErrGuess;

    Cell (double & p);					      |	    //Cell (double & p);
							      >	    Cell (void);
    ~Cell (void);						    ~Cell (void);
};								};


class Vertex							class Vertex
{								{
public:								public:
    int x;							    int x;
    int y;							    int y;
							      >	    int t;

    Vertex (int newX, int newY);			      |	    Vertex (int newX, int newY, int newT);
    ~Vertex (void) { }						    ~Vertex (void) { }
};								};


class Lattice							class Lattice
{								{
public:								public:
    int xSize;							    int xSize;
    int ySize;							    int ySize;
    int zSize;							    int zSize;
							      >	    int T;
    Cell ****cells;						    Cell ****cells;


    Lattice (int newXSize, double p);			      |	    Lattice (int newXSize, int newT);
    ~Lattice (void);						    ~Lattice (void);
    bool OCTsyndromeZZZZZZZZ (int xLoc, int yLoc);	      |	    bool OCTsyndromeZZZZZZZZ (int xLoc, int yLoc, double q_er
    bool SQsyndromeZZZZ (int xLoc, int yLoc);		      |	    bool SQsyndromeZZZZ (int xLoc, int yLoc, double q_err);
    vector<bool> getSignature (void);				    vector<bool> getSignature (void);
    void correct (int xLoc, int yLoc , int QubitNr);		    void correct (int xLoc, int yLoc , int QubitNr);
    void correctMesh ();				      |	    void evolute_and_correct (double p_err, double q_err_SQR,
							      >	    void perfect_correction(void);
							      >	    void evolute(double p_err);
    void correctLine ( int x1Loc, int y1Loc, int x2Loc, int y	    void correctLine ( int x1Loc, int y1Loc, int x2Loc, int y
    Operator* getLogical (string whichOp);			    Operator* getLogical (string whichOp);
    vertical_direction v_where_to_go(int x1, int x2);		    vertical_direction v_where_to_go(int x1, int x2);
    int delta_xy(int x1, int x2, int Size);			    int delta_xy(int x1, int x2, int Size);
    celltype which_cell_type (int x, int y);			    celltype which_cell_type (int x, int y);
    bool is_line();						    bool is_line();
    bool is_corrected();					    bool is_corrected();
    void generateline();					    void generateline();
    bool success (Operator *p);				      |	    bool success (void);
    void printState (void);					    void printState (void);
    void printStateQB(void);					    void printStateQB(void);
							      >	    void print2DState(void);
							      >
							      >

};								};


#endif								#endif
